crossoverPopulation <- function(population, fitness1, fitness2, elitismPercent, alpha, beta) {
populationSize <- length(population)
combinedFitness <- sapply(1:populationSize, function(i) {
(alpha * fitness1[i] + beta * fitness2[i]) / (alpha + beta)
})
# Ordenando os cromossomos com base no fitness combinado
orderedIndices <- order(combinedFitness, decreasing = TRUE)
numElites <- ceiling(elitismPercent * populationSize)
# Selecionando os elites
elites <- population[orderedIndices[1:numElites]]
newPopulation <- elites
# Preenchendo o restante da população com crossover
while(length(newPopulation) < populationSize) {
parents <- sample(population, 2)
cutPoint <- sample(2:(length(parents[[1]]) - 1), 1)
children <- pmxCrossover(parents[[1]], parents[[2]])
newPopulation <- c(newPopulation, list(children$child1))
if (length(newPopulation) < populationSize) {
newPopulation <- c(newPopulation, list(children$child2))
}
}
return(newPopulation)
}
mutateChromosome <- function(chromosome, mutationRate) {
mutatedChromosome <- chromosome
for (i in 1:length(chromosome)) {
if (runif(1) < mutationRate) {
# Escolhendo outro ponto aleatório para troca
swapIndex <- sample(length(chromosome), 1)
# Trocando os elementos
temp <- mutatedChromosome[i]
mutatedChromosome[i] <- mutatedChromosome[swapIndex]
mutatedChromosome[swapIndex] <- temp
}
}
return(mutatedChromosome)
}
getStatistics <- function(populationFitness1, populationFitness2, verbose = FALSE){
meanFitness1 <- mean(populationFitness1)
meanFitness2 <- mean(populationFitness2)
sdFitness1 <- sd(populationFitness1)
sdFitness2 <- sd(populationFitness2)
varFitness1 <- var(populationFitness1)
varFitness2 <- var(populationFitness2)
maxFitness1 <- max(populationFitness1)
maxFitness2 <- max(populationFitness2)
minFitness1 <- min(populationFitness1)
minFitness2 <- min(populationFitness2)
if(verbose){
cat("Geração", generation, "completada\n")
cat("Fitness 1 - Média:", meanFitness1, "Variação:", varFitness1, "DP:", sdFitness1, "Máx:", maxFitness1, "Mín:", minFitness1, "\n")
cat("Fitness 2 - Média:", meanFitness2, "Variação:", varFitness2, "DP:", sdFitness2, "Máx:", maxFitness2, "Mín:", minFitness2, "\n")
cat("\n")
}
return(list(meanFitness1 = meanFitness1, meanFitness2 = meanFitness2, sdFitness1 = sdFitness1, sdFitness2 = sdFitness2,
varFitness1 = varFitness1, varFitness2 = varFitness2, maxFitness1 = maxFitness1, maxFitness2 = maxFitness2,
minFitness1 = minFitness1, minFitness2 = minFitness2))
}
calculateTeamAverages <- function(teamTable) {
# Calculando a média de cada time
meanAzul <- mean(teamTable$rating[teamTable$Team == "Azul"])
meanBranco <- mean(teamTable$rating[teamTable$Team == "Branco"])
meanLaranja <- mean(teamTable$rating[teamTable$Team == "Laranja"])
# Criando uma string com as médias
cat("Média do time Azul:", meanAzul, "\n")
cat("Média do time Branco:", meanBranco, "\n")
cat("Média do time Laranja:", meanLaranja, "\n")
cat("\n")
return(paste("Média do time Azul:", meanAzul, "\n",
"Média do time Branco:", meanBranco, "\n",
"Média do time Laranja:", meanLaranja, "\n")
)
}
selectUniqueBestIndividual <- function(population, fitness1, fitness2, alphaCoef, betaCoef) {
# Calcula o fitness combinado
combinedFitness <- (alphaCoef * fitness1 + betaCoef * fitness2) / (alphaCoef + betaCoef)
# Ordena os indivíduos pelo fitness combinado
orderedIndices <- order(combinedFitness, decreasing = TRUE)
bestIndividual <- population[[orderedIndices[1]]]
return(bestIndividual)
}
# Função para criar uma tabela para um indivíduo
createTableForIndividual <- function(individual, playerDataFrame) {
playerInfo <- playerDataFrame[individual, ]
team <- rep(NA, length(individual))
team[1:7] <- "Azul"
team[8:14] <- "Branco"
team[15:21] <- "Laranja"
cbind(playerInfo, Team = team)
}
# Criando tabelas para os dois melhores indivíduos
tableBestIndividual <- createTableForIndividual(bestIndividual, playerDataFrame)
bestIndividual <- selectUniqueBestIndividual(population,
populationFitness$populationFitness1,
populationFitness$populationFitness2,
alphaCoef, betaCoef)
# Criando tabelas para os dois melhores indivíduos
tableBestIndividual <- createTableForIndividual(bestIndividual, playerDataFrame)
# Exibindo as tabelas e estatisticas
print(tableBestIndividual)
averageScorest1 <- calculateTeamAverages(tableBestIndividual)
printTeamDetails <- function(team, playerDataFrame) {
# Ordem de prioridade para as posições
positionOrder <- c("GOL", "ZAG", "MEI", "ATA")
# Selecionando e ordenando os jogadores do time
teamPlayers <- playerDataFrame[team, ]
teamPlayers <- teamPlayers[order(match(teamPlayers$position, positionOrder), -teamPlayers$rating), ]
# Imprimindo detalhes dos jogadores
for (i in 1:nrow(teamPlayers)) {
cat(teamPlayers$player[i], "(", teamPlayers$position[i], ") - ", teamPlayers$rating[i], "\n")
}
# Calculando e imprimindo a média do time
teamAverage <- mean(teamPlayers$rating)
cat("Média do time:", round(teamAverage, 1), "\n\n")
}
# Usando a função
printTeamDetailsForIndividual(tableBestIndividual, playerDataFrame)
# Exemplo de uso
printTeamDetailsForIndividual <- function(individual, playerDataFrame) {
# Dividindo o cromossomo em três times
teams <- split(individual, ceiling(seq_along(individual) / 7))
cat("Time Azul:\n")
printTeamDetails(teams[[1]], playerDataFrame)
cat("Time Branco:\n")
printTeamDetails(teams[[2]], playerDataFrame)
cat("Time Laranja:\n")
printTeamDetails(teams[[3]], playerDataFrame)
}
# Usando a função
printTeamDetailsForIndividual(tableBestIndividual, playerDataFrame)
teams <- split(individual, ceiling(seq_along(individual) / 7))
teams <- split(tableBestIndividual, ceiling(seq_along(tableBestIndividual) / 7))
# Usando a função
printTeamDetailsForIndividual(bestIndividual, playerDataFrame)
tableBestIndividual %>%
filter(Team == "Azul") %>%
arrange(match(position, c("GOL", "ZAG", "MEI", "ATA")), -rating)
library(dplyr)
tableBestIndividual %>%
filter(Team == "Azul") %>%
arrange(match(position, c("GOL", "ZAG", "MEI", "ATA")), -rating)
tableBestIndividual %>%
filter(Team == "Azul") %>%
arrange(match(position, c("GOL", "ZAG", "MEI", "ATA")), -rating)
timeAzul <- tableBestIndividual %>%
filter(Team == "Azul") %>%
arrange(match(position, c("GOL", "ZAG", "MEI", "ATA")), -rating)
mediaTimeAzul <- mean(timeAzul$rating)
timeAzul
cat("A média do time Azul é:", round(mediaTimeAzul, 2), "\n")
selectedTeam <- function(tableBestIndividual, team = "Azul"){
timeAzul <- tableBestIndividual %>%
filter(Team == team) %>%
arrange(match(position, c("GOL", "ZAG", "MEI", "ATA")), -rating)
mediaTimeAzul <- mean(timeAzul$rating)
print(timeAzul)
cat("A média do time Azul é:", round(mediaTimeAzul, 2), "\n")
}
selectedTeam()
selectedTeam(tableBestIndividual)
selectedTeam <- function(tableBestIndividual, team = "Azul"){
timeAzul <- tableBestIndividual %>%
filter(Team == team) %>%
arrange(match(position, c("GOL", "ZAG", "MEI", "ATA")), -rating)
mediaTimeAzul <- mean(timeAzul$rating)
print(timeAzul)
cat("")
cat("A média do time Azul é:", round(mediaTimeAzul, 2), "\n")
}
selectedTeam(tableBestIndividual)
selectedTeam <- function(tableBestIndividual, team = "Azul"){
timeAzul <- tableBestIndividual %>%
filter(Team == team) %>%
arrange(match(position, c("GOL", "ZAG", "MEI", "ATA")), -rating)
mediaTimeAzul <- mean(timeAzul$rating)
print(timeAzul)
cat("\n")
cat("A média do time Azul é:", round(mediaTimeAzul, 2), "\n")
}
selectedTeam(tableBestIndividual)
selectedTeam <- function(tableBestIndividual, team = "Azul"){
teamColor <- tableBestIndividual %>%
filter(Team == team) %>%
arrange(match(position, c("GOL", "ZAG", "MEI", "ATA")), -rating)
mediaTimeAzul <- mean(teamColor$rating)
print(teamColor)
cat("\n")
cat("A média do time", team,"é:", round(mediaTimeAzul, 2), "\n")
}
selectedTeam(tableBestIndividual)
selectedTeam(tableBestIndividual, team = "Azul")
selectedTeam(tableBestIndividual, team = "Branco")
selectedTeam(tableBestIndividual, team = "Laranja")
selectedTeam <- function(tableBestIndividual, team = "Azul"){
teamColor <- tableBestIndividual %>%
filter(Team == team) %>%
arrange(match(position, c("GOL", "ZAG", "MEI", "ATA")), -rating)
mediaTimeAzul <- mean(teamColor$rating)
print(teamColor)
cat("\n")
cat("A média do time", team,"é:", round(mediaTimeAzul, 2), "\n")
}
selectedTeam(tableBestIndividual, team = "Azul")
selectedTeam(tableBestIndividual, team = "Branco")
selectedTeam(tableBestIndividual, team = "Laranja")
source(ga_functions.R)
source("ga_functions.R")
library(dplyr)
source("ga_functions.R")
# Exemplo de uso da função
playerListString <- "1. Igor (ATA) - 5,92
2. Ademir (MEI) - 6,62
3. Leo Ribeiro (MEI) - 7,04
4. David (ZAG) - 6,70
5. Thiago Loiola (ATA) - 7,24
6. Leandro C (MEI) - 5,62
7. Kelvin (ATA) - 6,90
8. Olavo (ZAG) - 6,84
9. Otávio (GOL) - 6,54
10. Blasque (ATA) - 5,62
11. Victor Braga (ZAG) - 5,58
12. Thiago Braga (ZAG) - 4,46
13. Lucas Drago (GOL) - 7,54
14. Johnatan (MEI) - 6,46
15. Nikolas (ZAG) - 5,13
16. JP (GOL) - 7,08
17. Ricardo (ZAG) - 6,76
18. Ferlini (MEI) - 6,32
19. Guilherme (MEI) - 6,5
20. Thiago Teodoro (MEI) - 8,92
21. Lucão (MEI) - 6,74"
# Parâmetros do Algoritmo Genético
tournamentSize <- 3
populationSize <- 1000
elitismPercent <- 0.2
mutationRate <- 0.1 #0.05
alphaCoef <- 0.4      # coeficiente de peso para ajuste do fitness 1
betaCoef <- 0.6       # coeficiente de peso para ajuste do fitness 2
numGenerations <- 50  # Número de gerações
penalizedPairs = list(c('Victor Braga','Thiago Braga'),c('Thiago Loiola','Kelvin'))
# Definindo a lista de jogadores
playerDataFrame <- createPlayerDataFrame(playerListString)
# Gerando a população inicial
population <- generateInitialPopulation(populationSize)
# Avaliando o fitness da população
populationFitness <- evaluatePopulation(population, playerDataFrame, penalizedPairs)
# Loop principal do Algoritmo Genético
for (generation in 1:numGenerations) {
# Seleção por torneio
matingpool <- tournamentSelection(population,
populationFitness$populationFitness1,
populationFitness$populationFitness2,
tournamentSize, alphaCoef, betaCoef)
# Recalculando fitness para populaćão de acasalamento
matingpoolFitness <- evaluatePopulation(matingpool, playerDataFrame, penalizedPairs)
# Cruzamento com elitismo
newPopulation <- crossoverPopulation(matingpool,
matingpoolFitness$populationFitness1,
matingpoolFitness$populationFitness2,
elitismPercent, alphaCoef, betaCoef)
# Mutação
population <- lapply(newPopulation, function(chromo) mutateChromosome(chromo, mutationRate))
# Avaliando o fitness da população
populationFitness <- evaluatePopulation(population, playerDataFrame, penalizedPairs)
# Logística e estatísticas
list_result <- getStatistics(populationFitness$populationFitness1,
populationFitness$populationFitness2,
verbose = TRUE)
}
# Selecionando melhor indivíduo da populaćão
bestIndividual <- selectUniqueBestIndividual(population,
populationFitness$populationFitness1,
populationFitness$populationFitness2,
alphaCoef, betaCoef)
# Criando tabelas para os dois melhores indivíduos
tableBestIndividual <- createTableForIndividual(bestIndividual, playerDataFrame)
# Printando os resultado para cada um dos times
viewingTeams(tableBestIndividual, team = "Azul")
viewingTeams(tableBestIndividual, team = "Branco")
viewingTeams(tableBestIndividual, team = "Laranja")
selectUniqueBestIndividual <- function(population, fitness1, fitness2, alphaCoef, betaCoef) {
# Calcula o fitness combinado
combinedFitness <- (alphaCoef * fitness1 + betaCoef * fitness2) / (alphaCoef + betaCoef)
# Ordena os indivíduos pelo fitness combinado
orderedIndices <- order(combinedFitness, decreasing = TRUE)
bestIndividual <- population[[orderedIndices[1]]]
return(bestIndividual)
}
# Selecionando melhor indivíduo da populaćão
bestIndividual <- selectUniqueBestIndividual(population,
populationFitness$populationFitness1,
populationFitness$populationFitness2,
alphaCoef, betaCoef)
library(dplyr)
source("ga_functions.R")
# Exemplo de uso da função
playerListString <- "1. Igor (ATA) - 5,92
2. Ademir (MEI) - 6,62
3. Leo Ribeiro (MEI) - 7,04
4. David (ZAG) - 6,70
5. Thiago Loiola (ATA) - 7,24
6. Leandro C (MEI) - 5,62
7. Kelvin (ATA) - 6,90
8. Olavo (ZAG) - 6,84
9. Otávio (GOL) - 6,54
10. Blasque (ATA) - 5,62
11. Victor Braga (ZAG) - 5,58
12. Thiago Braga (ZAG) - 4,46
13. Lucas Drago (GOL) - 7,54
14. Johnatan (MEI) - 6,46
15. Nikolas (ZAG) - 5,13
16. JP (GOL) - 7,08
17. Ricardo (ZAG) - 6,76
18. Ferlini (MEI) - 6,32
19. Guilherme (MEI) - 6,5
20. Thiago Teodoro (MEI) - 8,92
21. Lucão (MEI) - 6,74"
# Parâmetros do Algoritmo Genético
tournamentSize <- 3
populationSize <- 1000
elitismPercent <- 0.2
mutationRate <- 0.1 #0.05
alphaCoef <- 0.4      # coeficiente de peso para ajuste do fitness 1
betaCoef <- 0.6       # coeficiente de peso para ajuste do fitness 2
numGenerations <- 50  # Número de gerações
penalizedPairs = list(c('Victor Braga','Thiago Braga'),c('Thiago Loiola','Kelvin'))
# Definindo a lista de jogadores
playerDataFrame <- createPlayerDataFrame(playerListString)
# Gerando a população inicial
population <- generateInitialPopulation(populationSize)
# Avaliando o fitness da população
populationFitness <- evaluatePopulation(population, playerDataFrame, penalizedPairs)
# Loop principal do Algoritmo Genético
for (generation in 1:numGenerations) {
# Seleção por torneio
matingpool <- tournamentSelection(population,
populationFitness$populationFitness1,
populationFitness$populationFitness2,
tournamentSize, alphaCoef, betaCoef)
# Recalculando fitness para populaćão de acasalamento
matingpoolFitness <- evaluatePopulation(matingpool, playerDataFrame, penalizedPairs)
# Cruzamento com elitismo
newPopulation <- crossoverPopulation(matingpool,
matingpoolFitness$populationFitness1,
matingpoolFitness$populationFitness2,
elitismPercent, alphaCoef, betaCoef)
# Mutação
population <- lapply(newPopulation, function(chromo) mutateChromosome(chromo, mutationRate))
# Avaliando o fitness da população
populationFitness <- evaluatePopulation(population, playerDataFrame, penalizedPairs)
# Logística e estatísticas
list_result <- getStatistics(populationFitness$populationFitness1,
populationFitness$populationFitness2,
verbose = TRUE)
}
# Selecionando melhor indivíduo da populaćão
bestIndividual <- selectUniqueBestIndividual(population,
populationFitness$populationFitness1,
populationFitness$populationFitness2,
alphaCoef, betaCoef)
# Criando tabelas para os dois melhores indivíduos
tableBestIndividual <- createTableForIndividual(bestIndividual, playerDataFrame)
# Printando os resultado para cada um dos times
viewingTeams(tableBestIndividual, team = "Azul")
viewingTeams(tableBestIndividual, team = "Branco")
viewingTeams(tableBestIndividual, team = "Laranja")
library(dplyr)
source("ga_functions.R")
# Exemplo de uso da função
playerListString <- "1. Igor (ATA) - 5,92
2. Ademir (MEI) - 6,62
3. Leo Ribeiro (MEI) - 7,04
4. David (ZAG) - 6,70
5. Thiago Loiola (ATA) - 7,24
6. Leandro C (MEI) - 5,62
7. Kelvin (ATA) - 6,90
8. Olavo (ZAG) - 6,84
9. Otávio (GOL) - 6,54
10. Blasque (ATA) - 5,62
11. Victor Braga (ZAG) - 5,58
12. Thiago Braga (ZAG) - 4,46
13. Lucas Drago (GOL) - 7,54
14. Johnatan (MEI) - 6,46
15. Nikolas (ZAG) - 5,13
16. JP (GOL) - 7,08
17. Ricardo (ZAG) - 6,76
18. Ferlini (MEI) - 6,32
19. Guilherme (MEI) - 6,5
20. Thiago Teodoro (MEI) - 8,92
21. Lucão (MEI) - 6,74"
# Parâmetros do Algoritmo Genético
tournamentSize <- 3
populationSize <- 1000
elitismPercent <- 0.2
mutationRate <- 0.1 #0.05
alphaCoef <- 0.4      # coeficiente de peso para ajuste do fitness 1
betaCoef <- 0.6       # coeficiente de peso para ajuste do fitness 2
numGenerations <- 50  # Número de gerações
penalizedPairs = list(c('Victor Braga','Thiago Braga'),c('Thiago Loiola','Kelvin'))
# Definindo a lista de jogadores
playerDataFrame <- createPlayerDataFrame(playerListString)
# Gerando a população inicial
population <- generateInitialPopulation(populationSize)
# Avaliando o fitness da população
populationFitness <- evaluatePopulation(population, playerDataFrame, penalizedPairs)
# Loop principal do Algoritmo Genético
for (generation in 1:numGenerations) {
# Seleção por torneio
matingpool <- tournamentSelection(population,
populationFitness$populationFitness1,
populationFitness$populationFitness2,
tournamentSize, alphaCoef, betaCoef)
# Recalculando fitness para populaćão de acasalamento
matingpoolFitness <- evaluatePopulation(matingpool, playerDataFrame, penalizedPairs)
# Cruzamento com elitismo
newPopulation <- crossoverPopulation(matingpool,
matingpoolFitness$populationFitness1,
matingpoolFitness$populationFitness2,
elitismPercent, alphaCoef, betaCoef)
# Mutação
population <- lapply(newPopulation, function(chromo) mutateChromosome(chromo, mutationRate))
# Avaliando o fitness da população
populationFitness <- evaluatePopulation(population, playerDataFrame, penalizedPairs)
# Logística e estatísticas
list_result <- getStatistics(populationFitness$populationFitness1,
populationFitness$populationFitness2,
verbose = TRUE)
}
# Selecionando melhor indivíduo da populaćão
bestIndividual <- selectUniqueBestIndividual(population,
populationFitness$populationFitness1,
populationFitness$populationFitness2,
alphaCoef, betaCoef)
# Criando tabelas para os dois melhores indivíduos
tableBestIndividual <- createTableForIndividual(bestIndividual, playerDataFrame)
# Printando os resultado para cada um dos times
viewingTeams(tableBestIndividual, team = "Azul")
viewingTeams(tableBestIndividual, team = "Branco")
viewingTeams(tableBestIndividual, team = "Laranja")
library(dplyr)
source("ga_functions.R")
# Exemplo de uso da função
playerListString <- "1. Igor (ATA) - 5,92
2. Ademir (MEI) - 6,62
3. Leo Ribeiro (MEI) - 7,04
4. David (ZAG) - 6,70
5. Thiago Loiola (ATA) - 7,24
6. Leandro C (MEI) - 5,62
7. Kelvin (ATA) - 6,90
8. Olavo (ZAG) - 6,84
9. Otávio (GOL) - 6,54
10. Blasque (ATA) - 5,62
11. Victor Braga (ZAG) - 5,58
12. Thiago Braga (ZAG) - 4,46
13. Lucas Drago (GOL) - 7,54
14. Johnatan (MEI) - 6,46
15. Nikolas (ZAG) - 5,13
16. JP (GOL) - 7,08
17. Ricardo (ZAG) - 6,76
18. Ferlini (MEI) - 6,32
19. Guilherme (MEI) - 6,5
20. Thiago Teodoro (MEI) - 8,92
21. Lucão (MEI) - 6,74"
# Parâmetros do Algoritmo Genético
tournamentSize <- 3
populationSize <- 1000
elitismPercent <- 0.2
mutationRate <- 0.1 #0.05
alphaCoef <- 0.4      # coeficiente de peso para ajuste do fitness 1
betaCoef <- 0.6       # coeficiente de peso para ajuste do fitness 2
numGenerations <- 50  # Número de gerações
penalizedPairs = list(c('Victor Braga','Thiago Braga'),c('Thiago Loiola','Kelvin'))
# Definindo a lista de jogadores
playerDataFrame <- createPlayerDataFrame(playerListString)
# Gerando a população inicial
population <- generateInitialPopulation(populationSize)
# Avaliando o fitness da população
populationFitness <- evaluatePopulation(population, playerDataFrame, penalizedPairs)
# Loop principal do Algoritmo Genético
for (generation in 1:numGenerations) {
# Seleção por torneio
matingpool <- tournamentSelection(population,
populationFitness$populationFitness1,
populationFitness$populationFitness2,
tournamentSize, alphaCoef, betaCoef)
# Recalculando fitness para populaćão de acasalamento
matingpoolFitness <- evaluatePopulation(matingpool, playerDataFrame, penalizedPairs)
# Cruzamento com elitismo
newPopulation <- crossoverPopulation(matingpool,
matingpoolFitness$populationFitness1,
matingpoolFitness$populationFitness2,
elitismPercent, alphaCoef, betaCoef)
# Mutação
population <- lapply(newPopulation, function(chromo) mutateChromosome(chromo, mutationRate))
# Avaliando o fitness da população
populationFitness <- evaluatePopulation(population, playerDataFrame, penalizedPairs)
# Logística e estatísticas
list_result <- getStatistics(populationFitness$populationFitness1,
populationFitness$populationFitness2,
verbose = TRUE)
}
# Selecionando melhor indivíduo da populaćão
bestIndividual <- selectUniqueBestIndividual(population,
populationFitness$populationFitness1,
populationFitness$populationFitness2,
alphaCoef, betaCoef)
# Criando tabelas para os dois melhores indivíduos
tableBestIndividual <- createTableForIndividual(bestIndividual, playerDataFrame)
# Printando os resultado para cada um dos times
viewingTeams(tableBestIndividual, team = "Azul")
viewingTeams(tableBestIndividual, team = "Branco")
viewingTeams(tableBestIndividual, team = "Laranja")
